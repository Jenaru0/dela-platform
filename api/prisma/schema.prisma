generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TipoUsuario {
  id          Int       @id @default(autoincrement())
  nombre      String    @db.VarChar(50)
  descripcion String?
  usuarios    Usuario[]

  @@map("tipo_usuario")
}

model Usuario {
  id                 Int                      @id @default(autoincrement())
  nombres            String?                  @db.VarChar(100)
  apellidos          String?                  @db.VarChar(100)
  email              String                   @unique @db.VarChar(150)
  celular            String?                  @db.VarChar(15)
  tipoUsuarioId      Int
  estado             String?                  @db.VarChar(20)
  creadoEn           DateTime                 @default(now()) @db.Timestamp(6)
  actualizadoEn      DateTime                 @updatedAt @db.Timestamp(6)
  auditorias         Auditoria[]
  carrito            Carrito?
  comentariosReclamo ComentarioReclamo[]
  direcciones        DireccionCliente[]
  favoritos          Favorito[]
  pedidos            Pedido[]
  reclamos           Reclamo[]
  recuperaciones     RecuperacionContrasena[]
  reviews            Review[]
  tipoUsuario        TipoUsuario              @relation(fields: [tipoUsuarioId], references: [id])
  auth               UsuarioAuth?

  @@map("usuario")
}

model UsuarioAuth {
  usuarioId    Int       @id
  contrasena   String
  ultimoAcceso DateTime?
  usuario      Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("usuario_auth")
}

model RecuperacionContrasena {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  token      String   @unique @db.VarChar(255)
  creadoEn   DateTime @default(now())
  expiracion DateTime
  usado      Boolean  @default(false)
  usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("recuperacion_contrasena")
}

model CategoriaProducto {
  id            Int        @id @default(autoincrement())
  nombre        String     @db.VarChar(100)
  descripcion   String?
  slug          String     @unique @db.VarChar(100)
  imagenUrl     String?    @db.VarChar(255)
  creadoEn      DateTime   @default(now())
  actualizadoEn DateTime   @updatedAt
  productos     Producto[]

  @@map("categoria_producto")
}

model Producto {
  id               Int               @id @default(autoincrement())
  nombre           String            @db.VarChar(100)
  sku              String            @unique @db.VarChar(50)
  slug             String            @unique @db.VarChar(150)
  descripcion      String?
  descripcionCorta String?           @db.VarChar(255)
  precioUnitario   Decimal           @db.Decimal(10, 2)
  precioAnterior   Decimal?          @db.Decimal(10, 2)
  stock            Int
  unidadMedida     String?           @db.VarChar(20)
  peso             Decimal?          @db.Decimal(10, 2)
  infoNutricional  Json?
  destacado        Boolean           @default(false)
  categoriaId      Int
  imagenUrl        String?           @db.VarChar(255)
  estado           EstadoProducto    @default(ACTIVO)
  creadoEn         DateTime          @default(now())
  actualizadoEn    DateTime          @updatedAt
  carritoItems     CarritoItem[]
  detallePedidos   DetallePedido[]
  favoritos        Favorito[]
  imagenes         ImagenProducto[]
  categoria        CategoriaProducto @relation(fields: [categoriaId], references: [id])
  reviews          Review[]

  @@map("producto")
}

model ImagenProducto {
  id         Int      @id @default(autoincrement())
  productoId Int
  url        String   @db.VarChar(255)
  principal  Boolean  @default(false)
  orden      Int      @default(0)
  creadoEn   DateTime @default(now())
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)

  @@map("imagen_producto")
}

model DireccionCliente {
  id             Int      @id @default(autoincrement())
  usuarioId      Int
  direccion      String
  distrito       String?  @db.VarChar(100)
  provincia      String?  @db.VarChar(100)
  codigoPostal   String?  @db.VarChar(10)
  referencia     String?
  predeterminada Boolean  @default(false)
  creadoEn       DateTime @default(now())
  actualizadoEn  DateTime @updatedAt
  usuario        Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  pedidos        Pedido[]

  @@map("direccion_cliente")
}

model Favorito {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  productoId Int
  creadoEn   DateTime @default(now())
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, productoId])
  @@map("favorito")
}

model Review {
  id           Int      @id @default(autoincrement())
  usuarioId    Int
  productoId   Int
  calificacion Int      @db.SmallInt
  comentario   String?
  estado       String   @default("pendiente") @db.VarChar(20)
  creadoEn     DateTime @default(now())
  producto     Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  usuario      Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("review")
}

model Promocion {
  id            Int      @id @default(autoincrement())
  codigo        String   @unique @db.VarChar(50)
  descripcion   String?
  tipo          String   @db.VarChar(50)
  valor         Decimal  @db.Decimal(10, 2)
  montoMinimo   Decimal? @db.Decimal(10, 2)
  inicioValidez DateTime
  finValidez    DateTime
  usoMaximo     Int?
  usoActual     Int      @default(0)
  activo        Boolean  @default(true)
  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt

  @@map("promocion")
}

model Newsletter {
  id       Int      @id @default(autoincrement())
  email    String   @unique @db.VarChar(150)
  activo   Boolean  @default(true)
  creadoEn DateTime @default(now())

  @@map("newsletter")
}

model Carrito {
  id            Int           @id @default(autoincrement())
  usuarioId     Int           @unique
  creadoEn      DateTime      @default(now())
  actualizadoEn DateTime      @updatedAt
  usuario       Usuario       @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  items         CarritoItem[]

  @@map("carrito")
}

model CarritoItem {
  id            Int      @id @default(autoincrement())
  carritoId     Int
  productoId    Int
  cantidad      Int
  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt
  carrito       Carrito  @relation(fields: [carritoId], references: [id], onDelete: Cascade)
  producto      Producto @relation(fields: [productoId], references: [id])

  @@index([carritoId])
  @@map("carrito_item")
}

model Pedido {
  id             Int              @id @default(autoincrement())
  usuarioId      Int
  direccionId    Int
  total          Decimal          @db.Decimal(10, 2)
  subtotal       Decimal          @db.Decimal(10, 2)
  envioMonto     Decimal          @db.Decimal(10, 2)
  descuentoMonto Decimal          @default(0.00) @db.Decimal(10, 2)
  estadoPedido   EstadoPedido     @default(PENDIENTE)
  metodoPago     MetodoPago
  metodoEnvio    MetodoEnvio
  fechaPedido    DateTime         @default(now())
  notasCliente   String?
  notasInternas  String?
  creadoEn       DateTime         @default(now())
  actualizadoEn  DateTime         @updatedAt
  detallePedidos DetallePedido[]
  pagos          Pago[]
  direccion      DireccionCliente @relation(fields: [direccionId], references: [id])
  usuario        Usuario          @relation(fields: [usuarioId], references: [id])
  reclamos       Reclamo[]

  @@index([usuarioId])
  @@index([estadoPedido])
  @@map("pedido")
}

model DetallePedido {
  id             Int      @id @default(autoincrement())
  pedidoId       Int
  productoId     Int
  cantidad       Int
  precioUnitario Decimal  @db.Decimal(10, 2)
  creadoEn       DateTime @default(now())
  actualizadoEn  DateTime @updatedAt
  pedido         Pedido   @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  producto       Producto @relation(fields: [productoId], references: [id])

  @@index([pedidoId])
  @@index([productoId])
  @@map("detalle_pedido")
}

model Pago {
  id         Int        @id @default(autoincrement())
  pedidoId   Int
  metodoPago MetodoPago
  monto      Decimal    @db.Decimal(10, 2)
  estado     String     @db.VarChar(50)
  referencia String?    @db.VarChar(255)
  fechaPago  DateTime?
  creadoEn   DateTime   @default(now())
  pedido     Pedido     @relation(fields: [pedidoId], references: [id], onDelete: Cascade)

  @@map("pago")
}

model Reclamo {
  id            Int                 @id @default(autoincrement())
  usuarioId     Int
  pedidoId      Int
  asunto        String              @db.VarChar(150)
  descripcion   String
  estado        EstadoReclamo       @default(ABIERTO)
  tipoReclamo   TipoReclamo         @default(OTRO)
  creadoEn      DateTime            @default(now())
  actualizadoEn DateTime            @updatedAt
  comentarios   ComentarioReclamo[]
  pedido        Pedido              @relation(fields: [pedidoId], references: [id])
  usuario       Usuario             @relation(fields: [usuarioId], references: [id])

  @@map("reclamo")
}

model ComentarioReclamo {
  id         Int      @id @default(autoincrement())
  reclamoId  Int
  comentario String
  usuarioId  Int
  creadoEn   DateTime @default(now())
  reclamo    Reclamo  @relation(fields: [reclamoId], references: [id], onDelete: Cascade)
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])

  @@map("comentario_reclamo")
}

model Auditoria {
  id              Int      @id @default(autoincrement())
  usuarioId       Int
  entidad         String   @db.VarChar(100)
  entidadId       String   @db.VarChar(50)
  accion          String   @db.VarChar(50)
  datosAnteriores Json?
  datosNuevos     Json?
  creadoEn        DateTime @default(now())
  usuario         Usuario  @relation(fields: [usuarioId], references: [id])

  @@map("auditoria")
}

enum EstadoProducto {
  ACTIVO
  INACTIVO
}

enum EstadoPedido {
  PENDIENTE
  PROCESANDO
  ENVIADO
  ENTREGADO
  CANCELADO
}

enum EstadoReclamo {
  ABIERTO
  EN_PROCESO
  RESUELTO
  RECHAZADO
}

enum MetodoPago {
  TARJETA
  TRANSFERENCIA
  EFECTIVO
  YAPE
  PLIN
}

enum MetodoEnvio {
  DELIVERY
  RECOJO_TIENDA
}

enum TipoReclamo {
  DEMORA_ENTREGA
  PRODUCTO_DEFECTUOSO
  PEDIDO_INCOMPLETO
  COBRO_INCORRECTO
  SOLICITUD_CANCELACION
  OTRO
}
