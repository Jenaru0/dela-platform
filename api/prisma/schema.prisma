// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}

/////////////////////
// ENUMS de estado //
/////////////////////

enum EstadoProducto {
  ACTIVO
  INACTIVO
}

enum EstadoPedido {
  PENDIENTE
  PROCESANDO
  ENVIADO
  ENTREGADO
  CANCELADO
}

enum EstadoReclamo {
  ABIERTO
  EN_PROCESO
  RESUELTO
  RECHAZADO
}

enum MetodoPago {
  TARJETA
  TRANSFERENCIA
  EFECTIVO
  YAPE
  PLIN
}

enum MetodoEnvio {
  DELIVERY
  RECOJO_TIENDA
}

enum TipoReclamo {
  DEMORA_ENTREGA
  PRODUCTO_DEFECTUOSO
  PEDIDO_INCOMPLETO
  COBRO_INCORRECTO
  SOLICITUD_CANCELACION
  OTRO
}

//////////////////////
// Modelos principales
//////////////////////

model TipoUsuario {
  id          Int       @id @default(autoincrement())
  nombre      String    @db.VarChar(50)
  descripcion String?
  usuarios    Usuario[]

  @@map("tipo_usuario")
}

model Usuario {
  id                Int                       @id @default(autoincrement())
  nombres           String?                   @db.VarChar(100)
  apellidos         String?                   @db.VarChar(100)
  email             String    @unique         @db.VarChar(150)
  celular           String?                   @db.VarChar(15)
  tipoUsuarioId     Int
  tipoUsuario       TipoUsuario @relation(fields: [tipoUsuarioId], references: [id])
  estado            String?                   @db.VarChar(20)
  creadoEn          DateTime  @default(now()) @db.Timestamp(6)
  actualizadoEn     DateTime  @updatedAt     @db.Timestamp(6)

  // Relaciones 1:N
  auth              UsuarioAuth?
  direcciones       DireccionCliente[]
  pedidos           Pedido[]
  reclamos          Reclamo[]
  recuperaciones    RecuperacionContrasena[]
  carrito           Carrito?
  auditorias        Auditoria[]
  favoritos         Favorito[]
  reviews           Review[]
  comentariosReclamo ComentarioReclamo[] // Añadido para completar la relación bidireccional

  @@map("usuario")
}

model UsuarioAuth {
  usuarioId    Int     @id
  contrasena   String  @db.Text
  ultimoAcceso DateTime?

  usuario      Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("usuario_auth")
}

model RecuperacionContrasena {
  id          Int      @id @default(autoincrement())
  usuarioId   Int
  token       String   @unique @db.VarChar(255)
  creadoEn    DateTime @default(now())
  expiracion  DateTime
  usado       Boolean  @default(false)

  usuario     Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("recuperacion_contrasena")
}

model CategoriaProducto {
  id             Int        @id @default(autoincrement())
  nombre         String     @db.VarChar(100)
  descripcion    String?    @db.Text
  slug           String     @unique @db.VarChar(100) // Añadido para SEO
  imagenUrl      String?    @db.VarChar(255)
  creadoEn       DateTime   @default(now())
  actualizadoEn  DateTime   @updatedAt

  productos      Producto[]

  @@map("categoria_producto")
}

model Producto {
  id              Int              @id @default(autoincrement())
  nombre          String           @db.VarChar(100)
  sku             String           @unique @db.VarChar(50)
  slug            String           @unique @db.VarChar(150) // Añadido para SEO
  descripcion     String?          @db.Text
  descripcionCorta String?         @db.VarChar(255) // Añadido
  precioUnitario  Decimal          @db.Decimal(10, 2)
  precioAnterior  Decimal?         @db.Decimal(10, 2) // Añadido
  stock           Int
  unidadMedida    String?          @db.VarChar(20) // Añadido para lácteos
  peso            Decimal?         @db.Decimal(10, 2)
  infoNutricional Json?            // Añadido para lácteos
  destacado       Boolean          @default(false) // Añadido
  categoriaId     Int
  imagenUrl       String?          @db.VarChar(255)
  estado          EstadoProducto   @default(ACTIVO)
  creadoEn        DateTime         @default(now())
  actualizadoEn   DateTime         @updatedAt

  categoria       CategoriaProducto @relation(fields: [categoriaId], references: [id])
  detallePedidos  DetallePedido[]
  carritoItems    CarritoItem[]
  imagenes        ImagenProducto[]  // Añadido
  favoritos       Favorito[]        // Añadido
  reviews         Review[]          // Añadido

  @@map("producto")
}

// Nuevo modelo para múltiples imágenes
model ImagenProducto {
  id          Int       @id @default(autoincrement())
  productoId  Int
  url         String    @db.VarChar(255)
  principal   Boolean   @default(false)
  orden       Int       @default(0)
  creadoEn    DateTime  @default(now())
  
  producto    Producto  @relation(fields: [productoId], references: [id], onDelete: Cascade)

  @@map("imagen_producto")
}

model DireccionCliente {
  id            Int      @id @default(autoincrement())
  usuarioId     Int
  direccion     String   @db.Text
  distrito      String?  @db.VarChar(100)
  provincia     String?  @db.VarChar(100)
  codigoPostal  String?  @db.VarChar(10)
  referencia    String?  @db.Text
  predeterminada Boolean @default(false) // Añadido
  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt

  usuario       Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  pedidos       Pedido[]

  @@map("direccion_cliente")
}

// El resto de tus modelos se mantienen igual...

// Modelos adicionales para funcionalidades faltantes

model Favorito {
  id          Int       @id @default(autoincrement())
  usuarioId   Int
  productoId  Int
  creadoEn    DateTime  @default(now())
  
  usuario     Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  producto    Producto  @relation(fields: [productoId], references: [id], onDelete: Cascade)
  
  @@unique([usuarioId, productoId])
  @@map("favorito")
}

model Review {
  id            Int       @id @default(autoincrement())
  usuarioId     Int
  productoId    Int
  calificacion  Int       @db.SmallInt
  comentario    String?   @db.Text
  estado        String    @default("pendiente") @db.VarChar(20)
  creadoEn      DateTime  @default(now())
  
  usuario       Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  producto      Producto  @relation(fields: [productoId], references: [id], onDelete: Cascade)
  
  @@map("review")
}

model Promocion {
  id             Int       @id @default(autoincrement())
  codigo         String    @unique @db.VarChar(50)
  descripcion    String?   @db.Text
  tipo           String    @db.VarChar(50)  // porcentaje, monto_fijo, envio_gratis
  valor          Decimal   @db.Decimal(10, 2)
  montoMinimo    Decimal?  @db.Decimal(10, 2)
  inicioValidez  DateTime
  finValidez     DateTime
  usoMaximo      Int?
  usoActual      Int       @default(0)
  activo         Boolean   @default(true)
  creadoEn       DateTime  @default(now())
  actualizadoEn  DateTime  @updatedAt
  
  @@map("promocion")
}

model Newsletter {
  id          Int       @id @default(autoincrement())
  email       String    @unique @db.VarChar(150)
  activo      Boolean   @default(true)
  creadoEn    DateTime  @default(now())
  
  @@map("newsletter")
}

model Carrito {
  id            Int            @id @default(autoincrement())
  usuarioId     Int            @unique
  creadoEn      DateTime       @default(now())
  actualizadoEn DateTime       @updatedAt

  usuario       Usuario        @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  items         CarritoItem[]

  @@map("carrito")
}

model CarritoItem {
  id            Int      @id @default(autoincrement())
  carritoId     Int
  productoId    Int
  cantidad      Int
  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt

  carrito       Carrito  @relation(fields: [carritoId], references: [id], onDelete: Cascade)
  producto      Producto @relation(fields: [productoId], references: [id])

  @@index([carritoId])
  @@map("carrito_item")
}

model Pedido {
  id             Int           @id @default(autoincrement())
  usuarioId      Int
  direccionId    Int
  total          Decimal       @db.Decimal(10, 2)
  subtotal       Decimal       @db.Decimal(10, 2)
  envioMonto     Decimal       @db.Decimal(10, 2)
  descuentoMonto Decimal       @db.Decimal(10, 2) @default(0.00)
  estadoPedido   EstadoPedido  @default(PENDIENTE)
  metodoPago     MetodoPago
  metodoEnvio    MetodoEnvio
  fechaPedido    DateTime      @default(now())
  notasCliente   String?       @db.Text
  notasInternas  String?       @db.Text
  creadoEn       DateTime      @default(now())
  actualizadoEn  DateTime      @updatedAt

  usuario        Usuario       @relation(fields: [usuarioId], references: [id])
  direccion      DireccionCliente @relation(fields: [direccionId], references: [id])
  detallePedidos DetallePedido[]
  pagos          Pago[]
  reclamos       Reclamo[]

  @@index([usuarioId])
  @@index([estadoPedido])
  @@map("pedido")
}

model DetallePedido {
  id             Int      @id @default(autoincrement())
  pedidoId       Int
  productoId     Int
  cantidad       Int
  precioUnitario Decimal  @db.Decimal(10, 2)
  creadoEn       DateTime @default(now())
  actualizadoEn  DateTime @updatedAt

  pedido         Pedido   @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  producto       Producto @relation(fields: [productoId], references: [id])

  @@index([pedidoId])
  @@index([productoId])
  @@map("detalle_pedido")
}

model Pago {
  id             Int       @id @default(autoincrement())
  pedidoId       Int
  metodoPago     MetodoPago
  monto          Decimal   @db.Decimal(10, 2)
  estado         String    @db.VarChar(50) // pendiente, completado, fallido, reembolsado
  referencia     String?   @db.VarChar(255)
  fechaPago      DateTime?
  creadoEn       DateTime  @default(now())
  
  pedido         Pedido    @relation(fields: [pedidoId], references: [id], onDelete: Cascade)

  @@map("pago")
}

model Reclamo {
  id              Int           @id @default(autoincrement())
  usuarioId       Int
  pedidoId        Int
  asunto          String        @db.VarChar(150)
  descripcion     String        @db.Text
  estado          EstadoReclamo @default(ABIERTO)
  tipoReclamo     TipoReclamo @default(OTRO)
  creadoEn        DateTime      @default(now())
  actualizadoEn   DateTime      @updatedAt

  usuario         Usuario       @relation(fields: [usuarioId], references: [id])
  pedido          Pedido        @relation(fields: [pedidoId], references: [id])
  comentarios     ComentarioReclamo[]

  @@map("reclamo")
}

model ComentarioReclamo {
  id               Int       @id @default(autoincrement())
  reclamoId        Int
  comentario       String    @db.Text
  usuarioId        Int
  creadoEn         DateTime  @default(now())

  reclamo          Reclamo   @relation(fields: [reclamoId], references: [id], onDelete: Cascade)
  usuario          Usuario   @relation(fields: [usuarioId], references: [id])

  @@map("comentario_reclamo")
}

model Auditoria {
  id               Int       @id @default(autoincrement())
  usuarioId        Int
  entidad          String    @db.VarChar(100)
  entidadId        String    @db.VarChar(50)
  accion           String    @db.VarChar(50)  // crear, actualizar, eliminar
  datosAnteriores  Json?
  datosNuevos      Json?
  creadoEn         DateTime  @default(now())

  usuario          Usuario   @relation(fields: [usuarioId], references: [id])

  @@map("auditoria")
}
